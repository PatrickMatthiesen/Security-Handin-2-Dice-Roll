// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiceRollServiceClient is the client API for DiceRollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiceRollServiceClient interface {
	CommitRoll(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*CommitmentResponse, error)
	ValidateRoll(ctx context.Context, in *RollValidation, opts ...grpc.CallOption) (*RollValidationResponse, error)
}

type diceRollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiceRollServiceClient(cc grpc.ClientConnInterface) DiceRollServiceClient {
	return &diceRollServiceClient{cc}
}

func (c *diceRollServiceClient) CommitRoll(ctx context.Context, in *Commitment, opts ...grpc.CallOption) (*CommitmentResponse, error) {
	out := new(CommitmentResponse)
	err := c.cc.Invoke(ctx, "/proto.DiceRollService/CommitRoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diceRollServiceClient) ValidateRoll(ctx context.Context, in *RollValidation, opts ...grpc.CallOption) (*RollValidationResponse, error) {
	out := new(RollValidationResponse)
	err := c.cc.Invoke(ctx, "/proto.DiceRollService/ValidateRoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiceRollServiceServer is the server API for DiceRollService service.
// All implementations must embed UnimplementedDiceRollServiceServer
// for forward compatibility
type DiceRollServiceServer interface {
	CommitRoll(context.Context, *Commitment) (*CommitmentResponse, error)
	ValidateRoll(context.Context, *RollValidation) (*RollValidationResponse, error)
	mustEmbedUnimplementedDiceRollServiceServer()
}

// UnimplementedDiceRollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiceRollServiceServer struct {
}

func (UnimplementedDiceRollServiceServer) CommitRoll(context.Context, *Commitment) (*CommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitRoll not implemented")
}
func (UnimplementedDiceRollServiceServer) ValidateRoll(context.Context, *RollValidation) (*RollValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRoll not implemented")
}
func (UnimplementedDiceRollServiceServer) mustEmbedUnimplementedDiceRollServiceServer() {}

// UnsafeDiceRollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiceRollServiceServer will
// result in compilation errors.
type UnsafeDiceRollServiceServer interface {
	mustEmbedUnimplementedDiceRollServiceServer()
}

func RegisterDiceRollServiceServer(s grpc.ServiceRegistrar, srv DiceRollServiceServer) {
	s.RegisterService(&DiceRollService_ServiceDesc, srv)
}

func _DiceRollService_CommitRoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Commitment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceRollServiceServer).CommitRoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DiceRollService/CommitRoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceRollServiceServer).CommitRoll(ctx, req.(*Commitment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiceRollService_ValidateRoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollValidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiceRollServiceServer).ValidateRoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DiceRollService/ValidateRoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiceRollServiceServer).ValidateRoll(ctx, req.(*RollValidation))
	}
	return interceptor(ctx, in, info, handler)
}

// DiceRollService_ServiceDesc is the grpc.ServiceDesc for DiceRollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiceRollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DiceRollService",
	HandlerType: (*DiceRollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommitRoll",
			Handler:    _DiceRollService_CommitRoll_Handler,
		},
		{
			MethodName: "ValidateRoll",
			Handler:    _DiceRollService_ValidateRoll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/CoinToss.proto",
}
